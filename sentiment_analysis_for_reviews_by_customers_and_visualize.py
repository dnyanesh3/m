# -*- coding: utf-8 -*-
"""Sentiment analysis for reviews by customers and visualize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O0bTGzJN-kLpcgWhWadgyk9E3mKFe1rZ
"""

import nltk
nltk.download('punkt')
nltk.download('vader_lexicon') 
nltk.download('movie_reviews')

from nltk.sentiment.vader import SentimentIntensityAnalyzer as SIA
sia = SIA() 
sia.polarity_scores("This restaurant was great, but I'm not sure if I'll go there again.")

text = "I just got a call from my boss - does he realise it's Saturday?"
sia.polarity_scores(text)

text = "I just got a call from my boss - does he realise it's SATURDAY?! :("
sia.polarity_scores(text)

text = "I just got a call from my boss - does he realise it's Saturday? ðŸ˜Š"
sia.polarity_scores(text)

from textblob import TextBlob
from textblob import Blobber
from textblob.sentiments import NaiveBayesAnalyzer

blob = TextBlob("This restaurant was great, but I'm not sure if I'll go there again.")
blob.sentiment

blobber = Blobber(analyzer=NaiveBayesAnalyzer())

blob = blobber("This restaurant was great, but I'm not sure if I'll go there again.")
blob.sentiment

import pandas as pd

df = pd.DataFrame({'content': [
    "I love love love love this kitten",
    "I hate hate hate hate this keyboard",
    "I'm not sure how I feel about toast",
    "Did you see the baseball game yesterday?",
    "The package was delivered late and the contents were broken",
    "Trashy television shows are some of my favorites",
    "I'm seeing a Kubrick film tomorrow, I hear not so great things about it.",
    "I find chirping birds irritating, but I know I'm not the only one",
]})
df

def get_scores(content):
    blob = TextBlob(content)
    nb_blob = blobber(content)
    sia_scores = sia.polarity_scores(content)
    
    return pd.Series({
        'content': content,
        'textblob': blob.sentiment.polarity,
        'textblob_bayes': nb_blob.sentiment.p_pos - nb_blob.sentiment.p_neg,
        'nltk': sia_scores['compound'],
    })

scores = df.content.apply(get_scores)
scores.style.background_gradient(cmap='RdYlGn', axis=None, low=0.4, high=0.4)

